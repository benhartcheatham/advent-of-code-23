use clap::{arg, command, ArgAction};
use std::io;

const NUM_CYCLES: usize = 1_000_000_000;

fn main() -> Result<(), io::Error> {
    let input = include_str!("../../input.txt");
    let example = include_str!("../../example.txt");

    let matches = command!()
        .arg(arg!(example: -e).action(ArgAction::SetTrue))
        .get_matches();

    if matches.get_flag("example") {
        println!("solution (example): {}", solution(example));
    } else {
        println!("solution: {}", solution(input));
    }

    Ok(())
}

fn print_cycle(cycled: &Vec<Vec<u64>>) {
    for r in cycled {
        for c in r {
            let ch = match c {
                2 => '#',
                1 => 'O',
                _ => '.',
            };

            print!("{}", ch);
        }

        println!();
    }
}

/// Calculates a cycle on @platform. Mutates @platform in place.
///
/// Arguments
///
/// `@platform:` platform encoded as a 2D matrix where 0 is empty, 1 is a 'O'
/// and 2 is a '#'
fn perform_cycle(platform: &mut Vec<Vec<u64>>) {
    if platform.is_empty() {
        return;
    }

    // North
    let mut next;
    for c in 0..platform[0].len() {
        next = 0;

        for r in 0..platform.len() {
            if let Some(u) = platform[r].iter().nth(c) {
                match u {
                    2 => next = r + 1,
                    1 => {
                        if r > next {
                            platform[next][c] = 1;
                            platform[r][c] = 0;
                            next += 1;
                        } else if r == next {
                            next += 1;
                        } else {
                            next = r + 1;
                        }
                    }
                    _ => continue,
                }
            }
        }
    }

    // West
    for r in 0..platform.len() {
        next = 0;

        for c in 0..platform[r].len() {
            if let Some(u) = platform[r].iter().nth(c) {
                match u {
                    2 => next = c + 1,
                    1 => {
                        if c > next {
                            platform[r][next] = 1;
                            platform[r][c] = 0;
                            next += 1;
                        } else if c == next {
                            next += 1;
                        } else {
                            next = c + 1;
                        }
                    }
                    _ => continue,
                }
            }
        }
    }

    // South
    for c in 0..platform[0].len() {
        next = platform.len() - 1;

        for r in (0..platform.len()).rev() {
            if let Some(u) = platform[r].iter().nth(c) {
                match u {
                    2 => {
                        if r > 0 {
                            next = r - 1;
                        }
                    }
                    1 => {
                        if r < next {
                            platform[next][c] = 1;
                            platform[r][c] = 0;

                            if next > 0 {
                                next -= 1;
                            }
                        } else if r == next && next > 0 {
                            next -= 1;
                        } else {
                            if r > 0 {
                                next = r - 1;
                            }
                        }
                    }
                    _ => continue,
                }
            }
        }
    }

    // East
    for r in 0..platform.len() {
        next = platform[r].len() - 1;

        for c in (0..platform[r].len()).rev() {
            if let Some(u) = platform[r].iter().nth(c) {
                match u {
                    2 => {
                        if c > 0 {
                            next = c - 1
                        }
                    }
                    1 => {
                        if c < next {
                            platform[r][next] = 1;
                            platform[r][c] = 0;

                            if next > 0 {
                                next -= 1;
                            }
                        } else if c == next && next > 0 {
                            next -= 1;
                        } else {
                            if c > 0 {
                                next = c - 1;
                            }
                        }
                    }
                    _ => continue,
                }
            }
        }
    }
}

fn find_load(platform: Vec<String>) -> u64 {
    if platform.is_empty() {
        return 0;
    }

    let mut cycled = Vec::new();
    for (i, r) in platform.iter().enumerate() {
        cycled.push(Vec::new());

        for c in r.chars() {
            match c {
                '#' => cycled[i].push(2),
                'O' => cycled[i].push(1),
                _ => cycled[i].push(0),
            }
        }
    }

    // detect if there has been a cylce and then just repeat
    let mut iterations: Vec<String> = Vec::new();
    let mut num_left = NUM_CYCLES;
    for n in 0..NUM_CYCLES {
        perform_cycle(&mut cycled);

        if num_left == NUM_CYCLES {
            let iter: String = cycled.iter().fold(String::new(), |acc, v| {
                acc + v
                    .iter()
                    .map(|u| match u {
                        2 => "#",
                        1 => "O",
                        _ => ".",
                    })
                    .fold(String::new(), |s, ch| s + ch)
                    .as_str()
            });

            for (i, s) in iterations.iter().rev().enumerate() {
                if s == &iter {
                    let len = iterations.len() - i;
                    println!("s: {} iter: {}", s, iter);

                    num_left = (NUM_CYCLES - n) % len;
                    println!("cycle len: {} num_left: {}", len, num_left);
                    break;
                }
            }

            iterations.push(iter);
        } else if num_left > 0 {
            num_left -= 1;
        } else {
            break;
        }
    }

    print_cycle(&cycled);

    let mut rocks = Vec::new();
    for c in 0..cycled[0].len() {
        for (i, r) in cycled.iter().enumerate() {
            if let Some(u) = r.iter().nth(c) {
                match u {
                    1 =>
                        rocks.push(c);
                    _ => continue,
                }
            }
        }
    }

    cubes
        .iter()
        .fold(0, |load, rock| load + rock.get_load(cycled.len() as u64))
}

fn solution(input: &str) -> u64 {
    let lines: Vec<_> = input.lines().collect();
    let mut platform = Vec::new();
    let n_cols = if let Some(line) = lines.first() {
        line.len()
    } else {
        0
    };

    for line in lines {
        platform.push(line.to_string());
    }

    find_load(platform)
}
